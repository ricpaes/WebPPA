// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApi;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(bhubContext))]
    [Migration("20230414212804_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebApi.Models.Modelodocumento", b =>
                {
                    b.Property<int>("ModgId")
                        .HasColumnType("integer")
                        .HasColumnName("MODG_ID");

                    b.Property<DateTime?>("ModgLogdatahora")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("MODG_LOGDATAHORA");

                    b.Property<char?>("ModgStatus")
                        .HasColumnType("char")
                        .HasColumnName("MODG_STATUS");

                    b.Property<string>("ModgTexto")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("MODG_TEXTO");

                    b.Property<string>("ModgTitulo")
                        .HasColumnType("text")
                        .HasColumnName("MODG_TITULO");

                    b.Property<int?>("ModgUser")
                        .HasColumnType("integer")
                        .HasColumnName("MODG_USER");

                    b.HasKey("ModgId")
                        .HasName("MODELOGUIA_pkey");

                    b.ToTable("MODELODOCUMENTO", (string)null);

                    b.HasComment("Modelos de documentos, guias, notas fiscais, emails, etc");
                });

            modelBuilder.Entity("WebApi.Models.Pessoa", b =>
                {
                    b.Property<int>("PesIs")
                        .HasColumnType("integer")
                        .HasColumnName("PES_IS");

                    b.Property<int?>("PesCpf")
                        .HasColumnType("integer")
                        .HasColumnName("PES_CPF");

                    b.Property<string>("PesEmail")
                        .HasColumnType("text")
                        .HasColumnName("PES_EMAIL");

                    b.Property<DateTime?>("PesLogdatahora")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("PES_LOGDATAHORA");

                    b.Property<string>("PesNome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PES_NOME");

                    b.Property<char?>("PesStatus")
                        .HasColumnType("char")
                        .HasColumnName("PES_STATUS");

                    b.Property<int?>("PesUser")
                        .HasColumnType("integer")
                        .HasColumnName("PES_USER");

                    b.Property<int?>("SetId")
                        .HasColumnType("integer")
                        .HasColumnName("SET_ID");

                    b.HasKey("PesIs")
                        .HasName("PESSOA_pkey");

                    b.HasIndex("SetId");

                    b.ToTable("PESSOA", (string)null);
                });

            modelBuilder.Entity("WebApi.Models.Setor", b =>
                {
                    b.Property<int>("SetId")
                        .HasColumnType("integer")
                        .HasColumnName("SET_ID");

                    b.Property<DateTime?>("SetLogdatahora")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("SET_LOGDATAHORA");

                    b.Property<string>("SetNome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("SET_NOME");

                    b.Property<int?>("SetResponsavel")
                        .HasColumnType("integer")
                        .HasColumnName("SET_RESPONSAVEL");

                    b.Property<char?>("SetStatus")
                        .HasColumnType("char")
                        .HasColumnName("SET_STATUS");

                    b.Property<int?>("SetUser")
                        .HasColumnType("integer")
                        .HasColumnName("SET_USER");

                    b.HasKey("SetId")
                        .HasName("SETOR_pkey");

                    b.ToTable("SETOR", (string)null);
                });

            modelBuilder.Entity("WebApi.Models.Systemuser", b =>
                {
                    b.Property<decimal>("SusrId")
                        .HasColumnType("numeric")
                        .HasColumnName("SUSR_ID");

                    b.Property<DateTime?>("SusrLogdatahora")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("SUSR_LOGDATAHORA");

                    b.Property<string>("SusrLogin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("SUSR_LOGIN");

                    b.Property<string>("SusrNome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("SUSR_NOME");

                    b.Property<string>("SusrSenha")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("SUSR_SENHA");

                    b.Property<char?>("SusrStatus")
                        .HasColumnType("char")
                        .HasColumnName("SUSR_STATUS");

                    b.HasKey("SusrId")
                        .HasName("SYSTEMUSER_pkey");

                    b.ToTable("SYSTEMUSER", (string)null);
                });

            modelBuilder.Entity("WebApi.Models.Tipoacao", b =>
                {
                    b.Property<int>("TpaId")
                        .HasColumnType("integer")
                        .HasColumnName("TPA_ID");

                    b.Property<string>("TpaDescricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TPA_DESCRICAO");

                    b.Property<DateTime?>("TpaLogdatahora")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("TPA_LOGDATAHORA");

                    b.Property<char?>("TpaStatus")
                        .HasColumnType("char")
                        .HasColumnName("TPA_STATUS");

                    b.Property<int?>("TpaUser")
                        .HasColumnType("integer")
                        .HasColumnName("TPA_USER");

                    b.HasKey("TpaId")
                        .HasName("TIPOACAO_pkey");

                    b.ToTable("TIPOACAO", (string)null);
                });

            modelBuilder.Entity("WebApi.Models.Tipolinhaproduto", b =>
                {
                    b.Property<int>("TlpId")
                        .HasColumnType("integer")
                        .HasColumnName("TLP_ID");

                    b.Property<string>("TlpDescricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TLP_DESCRICAO");

                    b.Property<DateTime?>("TlpLogdatahora")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("TLP_LOGDATAHORA");

                    b.Property<char?>("TlpStatus")
                        .HasColumnType("char")
                        .HasColumnName("TLP_STATUS");

                    b.Property<int?>("TlpUser")
                        .HasColumnType("integer")
                        .HasColumnName("TLP_USER");

                    b.HasKey("TlpId")
                        .HasName("TIPOLINHAPRODUTO_pkey");

                    b.ToTable("TIPOLINHAPRODUTO", (string)null);
                });

            modelBuilder.Entity("WebApi.Models.Tipoparametromodelo", b =>
                {
                    b.Property<int>("TppmId")
                        .HasColumnType("integer")
                        .HasColumnName("TPPM_ID");

                    b.Property<string>("TppmColuna")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TPPM_COLUNA");

                    b.Property<DateTime?>("TppmLogdatahora")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("TPPM_LOGDATAHORA");

                    b.Property<string>("TppmNome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TPPM_NOME");

                    b.Property<char?>("TppmStatus")
                        .HasColumnType("char")
                        .HasColumnName("TPPM_STATUS");

                    b.Property<string>("TppmTabela")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TPPM_TABELA");

                    b.Property<int?>("TppmUser")
                        .HasColumnType("integer")
                        .HasColumnName("TPPM_USER");

                    b.HasKey("TppmId")
                        .HasName("TIPOPARAMETROMODELO_pkey");

                    b.ToTable("TIPOPARAMETROMODELO", (string)null);

                    b.HasComment("tabela com lista de parâmetros que podem ser usados nos modelos de email, guia e outros.");
                });

            modelBuilder.Entity("WebApi.Models.Tiposaida", b =>
                {
                    b.Property<int>("TpsId")
                        .HasColumnType("integer")
                        .HasColumnName("TPS_ID");

                    b.Property<string>("TpsDescricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TPS_DESCRICAO");

                    b.Property<DateTime?>("TpsLogdatahora")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("TPS_LOGDATAHORA");

                    b.Property<char?>("TpsStatus")
                        .HasColumnType("char")
                        .HasColumnName("TPS_STATUS");

                    b.Property<int?>("TpsUser")
                        .HasColumnType("integer")
                        .HasColumnName("TPS_USER");

                    b.HasKey("TpsId")
                        .HasName("TIPOSAIDA_pkey");

                    b.ToTable("TIPOSAIDA", (string)null);
                });

            modelBuilder.Entity("WebApi.Models.Workflow", b =>
                {
                    b.Property<int>("WrkId")
                        .HasColumnType("integer")
                        .HasColumnName("WRK_ID");

                    b.Property<int?>("ModgId")
                        .HasColumnType("integer")
                        .HasColumnName("MODG_ID");

                    b.Property<int>("TlpId")
                        .HasColumnType("integer")
                        .HasColumnName("TLP_ID");

                    b.Property<int>("TpaId")
                        .HasColumnType("integer")
                        .HasColumnName("TPA_ID");

                    b.Property<int>("TpsId")
                        .HasColumnType("integer")
                        .HasColumnName("TPS_ID");

                    b.Property<bool?>("WrkAguardaraprovacao")
                        .HasColumnType("boolean")
                        .HasColumnName("WRK_AGUARDARAPROVACAO");

                    b.Property<DateTime?>("WrkDatafim")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("WRK_DATAFIM");

                    b.Property<DateTime?>("WrkDatainicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("WRK_DATAINICIO");

                    b.Property<string>("WrkDescricao")
                        .HasColumnType("text")
                        .HasColumnName("WRK_DESCRICAO");

                    b.Property<int?>("WrkDestino")
                        .HasColumnType("integer")
                        .HasColumnName("WRK_DESTINO");

                    b.Property<DateTime?>("WrkLogdatahora")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("WRK_LOGDATAHORA");

                    b.Property<bool?>("WrkPossuimodelo")
                        .HasColumnType("boolean")
                        .HasColumnName("WRK_POSSUIMODELO");

                    b.Property<int>("WrkSequencia")
                        .HasColumnType("integer")
                        .HasColumnName("WRK_SEQUENCIA");

                    b.Property<char?>("WrkStatus")
                        .HasColumnType("char")
                        .HasColumnName("WRK_STATUS");

                    b.Property<int?>("WrkUser")
                        .HasColumnType("integer")
                        .HasColumnName("WRK_USER");

                    b.HasKey("WrkId")
                        .HasName("WORKFLOW_pkey");

                    b.HasIndex("ModgId");

                    b.HasIndex("TlpId");

                    b.HasIndex("TpaId");

                    b.HasIndex("TpsId");

                    b.HasIndex("WrkDestino");

                    b.ToTable("WORKFLOW", (string)null);

                    b.HasComment("Tabela com os terefas que de devem ser realizadas para cada linha de produto e ação");
                });

            modelBuilder.Entity("WebApi.Models.Pessoa", b =>
                {
                    b.HasOne("WebApi.Models.Setor", "Set")
                        .WithMany("Pessoas")
                        .HasForeignKey("SetId")
                        .HasConstraintName("FK_PESSOA_SETOR");

                    b.Navigation("Set");
                });

            modelBuilder.Entity("WebApi.Models.Workflow", b =>
                {
                    b.HasOne("WebApi.Models.Modelodocumento", "Modg")
                        .WithMany("Workflows")
                        .HasForeignKey("ModgId")
                        .HasConstraintName("FK_WORKFLOW_MODG_ID");

                    b.HasOne("WebApi.Models.Tipolinhaproduto", "Tlp")
                        .WithMany("Workflows")
                        .HasForeignKey("TlpId")
                        .IsRequired()
                        .HasConstraintName("FK_WORKFLOW_TLP_ID");

                    b.HasOne("WebApi.Models.Tipoacao", "Tpa")
                        .WithMany("Workflows")
                        .HasForeignKey("TpaId")
                        .IsRequired()
                        .HasConstraintName("FK_WORKFLOW_TPA_ID");

                    b.HasOne("WebApi.Models.Tiposaida", "Tps")
                        .WithMany("Workflows")
                        .HasForeignKey("TpsId")
                        .IsRequired()
                        .HasConstraintName("FK_WORKFLOW_TPS_ID");

                    b.HasOne("WebApi.Models.Setor", "WrkDestinoNavigation")
                        .WithMany("Workflows")
                        .HasForeignKey("WrkDestino")
                        .HasConstraintName("FK_WORKFLOW_SET_ID");

                    b.Navigation("Modg");

                    b.Navigation("Tlp");

                    b.Navigation("Tpa");

                    b.Navigation("Tps");

                    b.Navigation("WrkDestinoNavigation");
                });

            modelBuilder.Entity("WebApi.Models.Modelodocumento", b =>
                {
                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("WebApi.Models.Setor", b =>
                {
                    b.Navigation("Pessoas");

                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("WebApi.Models.Tipoacao", b =>
                {
                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("WebApi.Models.Tipolinhaproduto", b =>
                {
                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("WebApi.Models.Tiposaida", b =>
                {
                    b.Navigation("Workflows");
                });
#pragma warning restore 612, 618
        }
    }
}
